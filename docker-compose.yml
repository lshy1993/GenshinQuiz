services:
  swagger-editor:
    image: swaggerapi/swagger-editor
    platform: linux/amd64
    ports:
      - "3020:8080"
    volumes:
      - ./backend/openapi:/mnt/swagger

  frontend:
    container_name: frontend
    build:
      context: ./frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - ./backend/openapi:/app/openapi # 挂载 openapi 文件夹
    environment:
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - backend
    command: /bin/sh -c "bunx orval --config orval.config.json && bun run dev" # 运行 Orval 生成代码然后启动 Bun 开发服务器

  # Go Backend API
  backend:
    container_name: go-backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - ./backend:/app
      - ./backend/migrations:/app/migrations:ro
    depends_on:
      database:
        condition: service_healthy
    environment:
      DATABASE_URL: postgres://postgres:postgres@database:5432/genshinquiz?sslmode=disable
      PORT: 8080
      ENVIRONMENT: development
      JWT_SECRET: your-super-secret-jwt-key
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: genshinquiz
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8080/health",
        ]
      interval: 30s
      retries: 3
      timeout: 10s
      start_period: 10s

  # Database Migration Service (runs once)
  migrator:
    image: golang:1.23-alpine
    working_dir: /app
    volumes:
      - ./backend:/app
    environment:
      DATABASE_URL: postgres://postgres:postgres@database:5432/genshinquiz?sslmode=disable
    depends_on:
      database:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Installing goose...' &&
        go install github.com/pressly/goose/v3/cmd/goose@latest &&
        echo 'Running migrations...' &&
        goose -dir ./migrations postgres 'postgres://postgres:postgres@database:5432/genshinquiz?sslmode=disable' up &&
        echo 'Migrations completed!'
      "

  database:
    container_name: postgres
    image: postgres:16-alpine
    restart: unless-stopped
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: genshinquiz
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  db_data:

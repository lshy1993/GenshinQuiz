volumes:
  postgres_data:
  redis_data:
  go_mods:
  go_tools:
  go_bin:
  vite_deps:

services:
  # React with Vite and Bun
  genshinquiz-frontend:
    build:
      context: ./repos/frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./repos/frontend:/app
      - /app/node_modules
      - ./repos/backend/openapi:/app/openapi # 挂载 openapi 文件夹
      - vite_deps:/app/node_modules/.vite # 挂载 Vite 依赖缓存
    environment:
      VITE_API_URL: http://localhost:8080/api/v1
      CHOKIDAR_USEPOLLING: true
    depends_on:
      - genshinquiz-backend
    command: /bin/sh -c "bun install && bun run dev:docker"
    profiles: ["genshinquiz"]

  # Go Backend API
  genshinquiz-backend:
    image: golang:1.25
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    working_dir: /app
    environment:
      GOBIN: /app/bin
      DATABASE_URL: "postgres://postgres:postgres@postgres:5432/genshinquiz?sslmode=disable"
      REDIS_HOST: redis
    volumes:
      - ./repos/backend:/app
      - go_mods:/go/pkg/mod
      - go_bin:/app/bin
    entrypoint:
      - /bin/sh
      - -c
      - |
        if [ ! -f /usr/local/bin/task ]; then
          curl -sL https://taskfile.dev/install.sh | sh -s -- -b /usr/local/bin
        fi
        if ! command -v psql &> /dev/null; then
          apt update && apt install -y postgresql-client && apt clean
        fi
        task init-env
        if [ ! -f /app/bin/goose ]; then
          go install github.com/pressly/goose/v3/cmd/goose@latest
        fi
        task db-migration-up
        task run-server
    # healthcheck:
    #   test:
    #     [
    #       "CMD",
    #       "wget",
    #       "--no-verbose",
    #       "--tries=1",
    #       "--spider",
    #       "http://localhost:8080/health",
    #     ]
    #   interval: 30s
    #   retries: 3
    #   timeout: 10s
    #   start_period: 40s
    profiles: ["genshinquiz"]

  # Node.js API Server
  node-api:
    image: node:22-alpine
    working_dir: /app
    ports:
      - "8020:8020"
    volumes:
      - ./repos/node-api:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - PORT=8020
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8020/"]
      interval: 30s
      retries: 3
      timeout: 10s
      start_period: 5s
    command: /bin/sh -c "npm install && node app.js"
    profiles: ["moe-link"]

  moe-link:
    build:
      context: ./repos/moe-link
    ports:
      - "3080:3080"
    volumes:
      - ./repos/moe-link:/app
      - /app/node_modules
      - ./repos/moe-link/openapi:/app/openapi # 挂载 openapi 文件夹
    environment:
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - backend
    command: /bin/sh -c "npm run dev"
    profiles: ["moe-link"]

  vue-home:
    build:
      context: ./repos/vue-home
    ports:
      - "3081:3081"
    volumes:
      - ./repos/vue-home:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - backend
    command: /bin/sh -c "npm run dev"
    profiles: ["moe-link"]

  alpha-soul:
    build:
      context: ./repos/AlphaSoul_Js
    ports:
      - "3082:3082"
    volumes:
      - ./repos/AlphaSoul_Js:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - node-api
    command: /bin/sh -c "npm run dev"
    profiles: ["moe-link"]

  # PostgreSQL Database
  postgres:
    container_name: postgres
    image: postgres:16.4-alpine
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: exampledb
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles: ["genshinquiz", "moe-link"]

  # Redis Cache and Queue
  redis:
    container_name: redis
    image: redis:7.2-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles: ["genshinquiz", "moe-link"]

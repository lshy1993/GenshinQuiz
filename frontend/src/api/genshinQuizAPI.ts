/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Genshin Quiz API
 * API for Genshin Impact Quiz Application
 * OpenAPI spec version: 1.0.0
 */
import * as axios from 'axios';
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  CreateQuizRequest,
  CreateUserRequest,
  GetQuizzes200,
  GetQuizzesParams,
  GetUsers200,
  GetUsersParams,
  HealthCheck200,
  Quiz,
  UpdateQuizRequest,
  UpdateUserRequest,
  User
} from './genshinQuizAPI.schemas';




  export const getGenshinQuizAPI = () => {
/**
 * @summary Health check endpoint
 */
const healthCheck = <TData = AxiosResponse<HealthCheck200>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/health`,options
    );
  }

/**
 * @summary Get all users
 */
const getUsers = <TData = AxiosResponse<GetUsers200>>(
    params?: GetUsersParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/users`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Create a new user
 */
const createUser = <TData = AxiosResponse<User>>(
    createUserRequest: CreateUserRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/users`,
      createUserRequest,options
    );
  }

/**
 * @summary Get user by ID
 */
const getUser = <TData = AxiosResponse<User>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/users/${id}`,options
    );
  }

/**
 * @summary Update user
 */
const updateUser = <TData = AxiosResponse<User>>(
    id: number,
    updateUserRequest: UpdateUserRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.put(
      `/users/${id}`,
      updateUserRequest,options
    );
  }

/**
 * @summary Delete user
 */
const deleteUser = <TData = AxiosResponse<null>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.delete(
      `/users/${id}`,options
    ).then((res) => {if (res.data === "") res.data = null; return res as TData;});
  }

/**
 * @summary Get all quizzes
 */
const getQuizzes = <TData = AxiosResponse<GetQuizzes200>>(
    params?: GetQuizzesParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/quizzes`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Create a new quiz
 */
const createQuiz = <TData = AxiosResponse<Quiz>>(
    createQuizRequest: CreateQuizRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/quizzes`,
      createQuizRequest,options
    );
  }

/**
 * @summary Get quiz by ID
 */
const getQuiz = <TData = AxiosResponse<Quiz>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/quizzes/${id}`,options
    );
  }

/**
 * @summary Update quiz
 */
const updateQuiz = <TData = AxiosResponse<Quiz>>(
    id: number,
    updateQuizRequest: UpdateQuizRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.put(
      `/quizzes/${id}`,
      updateQuizRequest,options
    );
  }

/**
 * @summary Delete quiz
 */
const deleteQuiz = <TData = AxiosResponse<null>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.delete(
      `/quizzes/${id}`,options
    ).then((res) => {if (res.data === "") res.data = null; return res as TData;});
  }

return {healthCheck,getUsers,createUser,getUser,updateUser,deleteUser,getQuizzes,createQuiz,getQuiz,updateQuiz,deleteQuiz}};
export type HealthCheckResult = AxiosResponse<HealthCheck200>
export type GetUsersResult = AxiosResponse<GetUsers200>
export type CreateUserResult = AxiosResponse<User>
export type GetUserResult = AxiosResponse<User>
export type UpdateUserResult = AxiosResponse<User>
export type DeleteUserResult = AxiosResponse<null>
export type GetQuizzesResult = AxiosResponse<GetQuizzes200>
export type CreateQuizResult = AxiosResponse<Quiz>
export type GetQuizResult = AxiosResponse<Quiz>
export type UpdateQuizResult = AxiosResponse<Quiz>
export type DeleteQuizResult = AxiosResponse<null>
